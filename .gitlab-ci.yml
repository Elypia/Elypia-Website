image: node:12.15.0-alpine3.11

# Defining some variables rather than repeating them everywhere.
variables:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: us.gcr.io/elypia/elypia-website

stages:
  - init
  - test
  - build-website
  - build-docker
  - deploy-docker
  - deploy-k8s

# All cache are uploaded and downloaded everywhere to avoids
# tasks or other builds from removing eachothers files.
cache:
  policy: pull-push
  paths:
    - dist/
    - node_modules/

init:
  stage: init
  script:
    - npm install
    - npm rebuild node-sass

test-lint:
  stage: test
  script:
    - npm run-script lint
  cache:
    policy: pull
    paths:
      - node_modules/

test-unit:
  stage: test
  image: buildkite/puppeteer:v1.15.0
  script:
    - npm run-script test
  cache:
    policy: pull
    paths:
      - node_modules/

# TODO: Enable e2e tests.
.test-e2e:
  stage: test
  image: buildkite/puppeteer:v1.15.0
  script:
    - npm run-script e2e
  cache:
    policy: pull
    paths:
      - node_modules/

# Before releasing a new version, make sure the package.json version
# matches the name (tag) of the version being deployed.
test-version:
  stage: test
  image: alpine:3.11.3
  only:
    - tags
  script:
    - |
      PROJECT_VERSION=`grep -ohEm 1 '\d+\.\d+\.\d+' ./package.json`
      if [ "${PROJECT_VERSION}" != "${CI_COMMIT_TAG}" ]; then
        echo git tag does not match version specified in package.json
        exit 1
      fi
  cache: {}

# Compile the website into static assets.
build-website:
  stage: build-website
  script:
    - npm run-script build

# Build the Dockerfile, we don't use the image, only verify if it builds without error.
build-docker:
  except:
    - tags
  stage: build-docker
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - docker build -t ${IMAGE_NAME}:latest .
  cache:
    policy: pull
    paths:
      - dist/

# Deploy our new Docker Image to Google Container Registry (Private)
deploy-docker:
  only:
    - tags
  stage: deploy-docker
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - docker build -t ${IMAGE_NAME}:latest .
    - docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${CI_COMMIT_TAG}
    - cat ${GCP_SA_KEY} | docker login -u _json_key --password-stdin https://us.gcr.io
    - docker push ${IMAGE_NAME}:${CI_COMMIT_TAG}
  cache:
    policy: pull
    paths:
      - dist/

# Apply the current Kubernetes Configuration
deploy-k8s:
  only:
    - tags
  stage: deploy-k8s
  image: google/cloud-sdk:278.0.0
  script:
    - gcloud auth activate-service-account --key-file ${GCP_SA_KEY}
    - gcloud container clusters get-credentials ${K8S_CLUSTER} --zone ${GCP_ZONE} --project elypia
    - sed -i 's/{{CI_COMMIT_TAG}}/'${CI_COMMIT_TAG}'/g' kubernetes.yml
    - kubectl apply -f kubernetes.yml
  cache: {}
